package com.develop.Course.Management.util;


import com.develop.Course.Management.entity.User;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.security.SignatureException;
import java.util.Base64;
import java.util.Date;

@Component
public class JwtAuthenticator {

    private final String jwtSecret = "eyJhbGciOiJIUzI1NiJ9.eyJSb2xlIjoiQWRtaW4iLCJJc3N1ZXIiOiJJc3N1ZXIiLCJVc2VybmFtZSI6IkphdmFJblVzZSIsImV4cCI6MTcyODU5MjU4OCwiaWF0IjoxNzI4NTkyNTg4fQ.EZ8V8iDao6NRGyXGhF_sRlI_u8j9zJBUKhel9XWeM-0";
    private final int jwtExpirationMs = 86400000;

    //generate jwt token
    public String generateJwtToken (User user){
        return Jwts.builder()
                .setSubject(user.getEmail())
                .setIssuedAt(new Date())
                .setExpiration(new Date(new Date().getTime()+jwtExpirationMs))
                .signWith(key(), SignatureAlgorithm.HS256)
                .compact();
    }

    //give the actual secret key
    private Key key() {return Keys.hmacShaKeyFor(Decoders.BASE64.decode(jwtSecret));}

    //validate token -> verify token generated by us
    public boolean validateJwtToken (String token) {
        String jwtToken = token.substring("Bearer".length());
        try{
            Jwts.parser().setSigningKey(key()).parse(jwtToken);
            return true;
        }catch (Exception e){
            System.out.println("Error in validateJwtToken");
        }
        return false;
    }
}
